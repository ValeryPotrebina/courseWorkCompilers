Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression COMPARE expression
Rule 2     expression -> expression PLUS expression
Rule 3     expression -> expression MINUS expression
Rule 4     expression -> expression MULT expression
Rule 5     expression -> expression DIV expression
Rule 6     expression -> expression POW expression
Rule 7     expression -> LPAREN expression RPAREN
Rule 8     expression -> VAR
Rule 9     expression -> NUMBER
Rule 10    expression -> MINUS expression
Rule 11    expression -> FUNCTION LPAREN expression RPAREN
Rule 12    expression -> FUNCTION VAR

Terminals, with rules where they appear

COMPARE              : 1
DIV                  : 5
FUNCTION             : 11 12
LPAREN               : 7 11
MINUS                : 3 10
MULT                 : 4
NUMBER               : 9
PLUS                 : 2
POW                  : 6
RPAREN               : 7 11
VAR                  : 8 12
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 5 6 6 7 10 11 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    COMPARE         shift and go to state 7
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    MULT            shift and go to state 10
    DIV             shift and go to state 11
    POW             shift and go to state 12


state 2

    (10) expression -> MINUS . expression
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 13

state 3

    (7) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 14

state 4

    (8) expression -> VAR .

    COMPARE         reduce using rule 8 (expression -> VAR .)
    PLUS            reduce using rule 8 (expression -> VAR .)
    MINUS           reduce using rule 8 (expression -> VAR .)
    MULT            reduce using rule 8 (expression -> VAR .)
    DIV             reduce using rule 8 (expression -> VAR .)
    POW             reduce using rule 8 (expression -> VAR .)
    $end            reduce using rule 8 (expression -> VAR .)
    RPAREN          reduce using rule 8 (expression -> VAR .)


state 5

    (9) expression -> NUMBER .

    COMPARE         reduce using rule 9 (expression -> NUMBER .)
    PLUS            reduce using rule 9 (expression -> NUMBER .)
    MINUS           reduce using rule 9 (expression -> NUMBER .)
    MULT            reduce using rule 9 (expression -> NUMBER .)
    DIV             reduce using rule 9 (expression -> NUMBER .)
    POW             reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)
    RPAREN          reduce using rule 9 (expression -> NUMBER .)


state 6

    (11) expression -> FUNCTION . LPAREN expression RPAREN
    (12) expression -> FUNCTION . VAR

    LPAREN          shift and go to state 15
    VAR             shift and go to state 16


state 7

    (1) expression -> expression COMPARE . expression
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 17

state 8

    (2) expression -> expression PLUS . expression
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 18

state 9

    (3) expression -> expression MINUS . expression
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 19

state 10

    (4) expression -> expression MULT . expression
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 20

state 11

    (5) expression -> expression DIV . expression
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 21

state 12

    (6) expression -> expression POW . expression
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 22

state 13

    (10) expression -> MINUS expression .
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    COMPARE         reduce using rule 10 (expression -> MINUS expression .)
    PLUS            reduce using rule 10 (expression -> MINUS expression .)
    MINUS           reduce using rule 10 (expression -> MINUS expression .)
    MULT            reduce using rule 10 (expression -> MINUS expression .)
    DIV             reduce using rule 10 (expression -> MINUS expression .)
    POW             reduce using rule 10 (expression -> MINUS expression .)
    $end            reduce using rule 10 (expression -> MINUS expression .)
    RPAREN          reduce using rule 10 (expression -> MINUS expression .)

  ! COMPARE         [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIV             [ shift and go to state 11 ]
  ! POW             [ shift and go to state 12 ]


state 14

    (7) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    RPAREN          shift and go to state 23
    COMPARE         shift and go to state 7
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    MULT            shift and go to state 10
    DIV             shift and go to state 11
    POW             shift and go to state 12


state 15

    (11) expression -> FUNCTION LPAREN . expression RPAREN
    (1) expression -> . expression COMPARE expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression MULT expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression POW expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . VAR
    (9) expression -> . NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . FUNCTION LPAREN expression RPAREN
    (12) expression -> . FUNCTION VAR

    LPAREN          shift and go to state 3
    VAR             shift and go to state 4
    NUMBER          shift and go to state 5
    MINUS           shift and go to state 2
    FUNCTION        shift and go to state 6

    expression                     shift and go to state 24

state 16

    (12) expression -> FUNCTION VAR .

    COMPARE         reduce using rule 12 (expression -> FUNCTION VAR .)
    PLUS            reduce using rule 12 (expression -> FUNCTION VAR .)
    MINUS           reduce using rule 12 (expression -> FUNCTION VAR .)
    MULT            reduce using rule 12 (expression -> FUNCTION VAR .)
    DIV             reduce using rule 12 (expression -> FUNCTION VAR .)
    POW             reduce using rule 12 (expression -> FUNCTION VAR .)
    $end            reduce using rule 12 (expression -> FUNCTION VAR .)
    RPAREN          reduce using rule 12 (expression -> FUNCTION VAR .)


state 17

    (1) expression -> expression COMPARE expression .
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    COMPARE         reduce using rule 1 (expression -> expression COMPARE expression .)
    $end            reduce using rule 1 (expression -> expression COMPARE expression .)
    RPAREN          reduce using rule 1 (expression -> expression COMPARE expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    MULT            shift and go to state 10
    DIV             shift and go to state 11
    POW             shift and go to state 12

  ! PLUS            [ reduce using rule 1 (expression -> expression COMPARE expression .) ]
  ! MINUS           [ reduce using rule 1 (expression -> expression COMPARE expression .) ]
  ! MULT            [ reduce using rule 1 (expression -> expression COMPARE expression .) ]
  ! DIV             [ reduce using rule 1 (expression -> expression COMPARE expression .) ]
  ! POW             [ reduce using rule 1 (expression -> expression COMPARE expression .) ]
  ! COMPARE         [ shift and go to state 7 ]


state 18

    (2) expression -> expression PLUS expression .
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    COMPARE         reduce using rule 2 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 2 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 2 (expression -> expression PLUS expression .)
    $end            reduce using rule 2 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression PLUS expression .)
    MULT            shift and go to state 10
    DIV             shift and go to state 11
    POW             shift and go to state 12

  ! MULT            [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! COMPARE         [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 19

    (3) expression -> expression MINUS expression .
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    COMPARE         reduce using rule 3 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 3 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 3 (expression -> expression MINUS expression .)
    $end            reduce using rule 3 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression MINUS expression .)
    MULT            shift and go to state 10
    DIV             shift and go to state 11
    POW             shift and go to state 12

  ! MULT            [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! COMPARE         [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 20

    (4) expression -> expression MULT expression .
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    COMPARE         reduce using rule 4 (expression -> expression MULT expression .)
    PLUS            reduce using rule 4 (expression -> expression MULT expression .)
    MINUS           reduce using rule 4 (expression -> expression MULT expression .)
    MULT            reduce using rule 4 (expression -> expression MULT expression .)
    DIV             reduce using rule 4 (expression -> expression MULT expression .)
    $end            reduce using rule 4 (expression -> expression MULT expression .)
    RPAREN          reduce using rule 4 (expression -> expression MULT expression .)
    POW             shift and go to state 12

  ! POW             [ reduce using rule 4 (expression -> expression MULT expression .) ]
  ! COMPARE         [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIV             [ shift and go to state 11 ]


state 21

    (5) expression -> expression DIV expression .
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    COMPARE         reduce using rule 5 (expression -> expression DIV expression .)
    PLUS            reduce using rule 5 (expression -> expression DIV expression .)
    MINUS           reduce using rule 5 (expression -> expression DIV expression .)
    MULT            reduce using rule 5 (expression -> expression DIV expression .)
    DIV             reduce using rule 5 (expression -> expression DIV expression .)
    $end            reduce using rule 5 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 5 (expression -> expression DIV expression .)
    POW             shift and go to state 12

  ! POW             [ reduce using rule 5 (expression -> expression DIV expression .) ]
  ! COMPARE         [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIV             [ shift and go to state 11 ]


state 22

    (6) expression -> expression POW expression .
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    COMPARE         reduce using rule 6 (expression -> expression POW expression .)
    PLUS            reduce using rule 6 (expression -> expression POW expression .)
    MINUS           reduce using rule 6 (expression -> expression POW expression .)
    MULT            reduce using rule 6 (expression -> expression POW expression .)
    DIV             reduce using rule 6 (expression -> expression POW expression .)
    $end            reduce using rule 6 (expression -> expression POW expression .)
    RPAREN          reduce using rule 6 (expression -> expression POW expression .)
    POW             shift and go to state 12

  ! POW             [ reduce using rule 6 (expression -> expression POW expression .) ]
  ! COMPARE         [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIV             [ shift and go to state 11 ]


state 23

    (7) expression -> LPAREN expression RPAREN .

    COMPARE         reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 7 (expression -> LPAREN expression RPAREN .)


state 24

    (11) expression -> FUNCTION LPAREN expression . RPAREN
    (1) expression -> expression . COMPARE expression
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . MULT expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . POW expression

    RPAREN          shift and go to state 25
    COMPARE         shift and go to state 7
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    MULT            shift and go to state 10
    DIV             shift and go to state 11
    POW             shift and go to state 12


state 25

    (11) expression -> FUNCTION LPAREN expression RPAREN .

    COMPARE         reduce using rule 11 (expression -> FUNCTION LPAREN expression RPAREN .)
    PLUS            reduce using rule 11 (expression -> FUNCTION LPAREN expression RPAREN .)
    MINUS           reduce using rule 11 (expression -> FUNCTION LPAREN expression RPAREN .)
    MULT            reduce using rule 11 (expression -> FUNCTION LPAREN expression RPAREN .)
    DIV             reduce using rule 11 (expression -> FUNCTION LPAREN expression RPAREN .)
    POW             reduce using rule 11 (expression -> FUNCTION LPAREN expression RPAREN .)
    $end            reduce using rule 11 (expression -> FUNCTION LPAREN expression RPAREN .)
    RPAREN          reduce using rule 11 (expression -> FUNCTION LPAREN expression RPAREN .)

